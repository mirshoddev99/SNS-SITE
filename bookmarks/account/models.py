from django.contrib.auth import get_user_model
from django.db import models
from django.conf import settings
from django.contrib.auth.models import AbstractUser


# Create your models here.
class Profile(AbstractUser):
    first_name = models.CharField(max_length=200)
    last_name = models.CharField(max_length=200)
    email = models.EmailField(max_length=100)
    date_of_birth = models.DateField(blank=True, null=True)
    photo = models.ImageField(upload_to='images/', blank=True)

    def __str__(self):
        return self.username


class Contact(models.Model):
    user_from = models.ForeignKey(Profile, related_name='rel_from_set', on_delete=models.CASCADE)
    user_to = models.ForeignKey(Profile, related_name='rel_to_set', on_delete=models.CASCADE)
    created = models.DateTimeField(auto_now_add=True)

    class Meta:
        indexes = [
            models.Index(fields=['-created'])
        ]

        ordering = ['-created']

    def __str__(self):
        return f"{self.user_from} follows {self.user_to}"


# Add following field to User dynamically
user_model = get_user_model()
user_model.add_to_class('following',models.ManyToManyField('self', through=Contact, related_name='followers', symmetrical=False))



"""
Bu holatda Profile modelining fieldiga automatik ravishda (following) and (followers) filedlar qoshilyapti.

Steps for Following:
1 - userni databasedan olyapmiz
2 - Profile modeling fieldlariga dynamic ravishda qoshilgan (following) field orqali 1-user kuzatayotgan barcha userlarni olyapmiz (except itself).

user_1= Profile.objects.get(id=1)                      
i_following_users = user_1.following.exclude(user_1.id)
>>> i_following_users.count()
5
>>> i_following_users
<QuerySet [<Profile: mushtariy>, <Profile: xudoyorxon>, <Profile: mirshod_python>, <Profile: Abdulmalik>, <Profile: Sevara>]>


Steps for Followers:
1 - userni databasedan olyapmiz
2 - Profile modeling fieldlariga dynamic ravishda qoshilgan (followers) field orqali 5-userga follow qilgan barcha userlarni olyapmiz.

>>> user_5 = Profile.objects.get(id=5)
>>> followers_of_user_5 = user_5.followers.all()
>>> followers_of_user_5
<QuerySet [<Profile: admin99>]>

"""


"""
In Django, the get_user_model() function is used to retrieve the user model used by the project.

In this code snippet, the get_user_model() function is called to retrieve the user model, which is then stored in the user_model variable.

Then the add_to_class() method is called on user_model to dynamically add a new field to the user model called following. 

This field is created using the ManyToManyField class with the following arguments:

self: This specifies that the field will be a many-to-many relationship with the same model (User model in this case).

through: This specifies the intermediary model that will be used to store the relationship between users (Contact model in this case).

related_name: This specifies the name of the reverse relation from the related object back to this model (followers in this case).

symmetrical: This specifies whether the relationship should be symmetrical or not (i.e., if a user A follows B, then B automatically follows A as well). In this case, it is set to False.
By adding the following field to the user model, we can now use it to represent the many-to-many relationship between users who follow each other, 
and query it to retrieve information about the users who are following or being followed.
"""


"""
Question: 
are following and followers fields added automatically to Profile model right or only added following filed?

Answer: 
In the code you provided, both the following and followers fields are added to the Profile model.

The following field is added using the add_to_class method of the User model returned by get_user_model(), 
which dynamically adds the following field to the Profile model. The following field is a many-to-many relationship with the Profile model, with an intermediate model Contact.

The followers field is created as a related name for the many-to-many relationship in the following field. 
It is not explicitly defined as a field in the Profile model, but it is automatically generated by Django as a reverse relation to the following field.

So in summary, the following field is added explicitly using add_to_class, and the followers field is automatically generated by Django as a related name for the following field.





"""